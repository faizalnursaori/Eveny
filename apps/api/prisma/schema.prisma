// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  customer
  organizer
}

enum TransactionStatus {
  pending
  completed
  failed
}

model User {
  id                Int                @id @default(autoincrement())
  role              Role               @default(customer)
  username          String             @unique
  email             String             @unique
  password          String
  name              String
  phoneNumber       String?
  referralCode      String?            @unique
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  referredById      Int?
  discountVoucher   String?
  referredBy        User?              @relation("UserReferrals", fields: [referredById], references: [id])
  referrals         User[]             @relation("UserReferrals")
  events            Event[]            @relation("UserEvents")
  transactions      Transaction[]
  points            Point[]
  reviews           Review[]
  pointTransactions PointTransaction[]
  vouchers          Voucher[]

  @@index([email])
}

model Event {
  id            Int           @id @default(autoincrement())
  slug          String        @unique
  category      String
  title         String
  description   String
  location      String
  startDate     DateTime      @default(now())
  endDate       DateTime      @default(now())
  availableSeat Int
  maxAttendees  Int
  imageUrl      String?
  isFree        Boolean
  price         Decimal?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  organizerId   Int
  organizer     User          @relation("UserEvents", fields: [organizerId], references: [id])
  reviews       Review[]
  promotions    Promotion[]
  vouchers      Voucher[]
  transactions  Transaction[]

  @@index([startDate, endDate])
  @@index([category])
}

model Transaction {
  id              Int               @id @default(autoincrement())
  eventId         Int
  quantity        Int
  totalPrice      Int
  finalPrice      Int
  discount        Int
  pointsUsed      Int               @default(0)
  transactionDate DateTime          @default(now())
  status          TransactionStatus @default(pending)
  userId          Int
  user            User              @relation(fields: [userId], references: [id])
  voucherId       Int?
  voucher         Voucher?          @relation(fields: [voucherId], references: [id])
  event           Event             @relation(fields: [eventId], references: [id])

  @@index([transactionDate])
  @@index([status])
  @@index([userId])
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  eventId   Int
  event     Event    @relation(fields: [eventId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])

  @@index([eventId])
  @@index([userId])
}

model Promotion {
  id                 Int      @id @default(autoincrement())
  startDate          DateTime @default(now())
  endDate            DateTime
  discountCode       String
  discountPercentage Decimal
  maxUses            Int
  usedCount          Int      @default(0)
  eventId            Int
  event              Event    @relation(fields: [eventId], references: [id])

  @@index([discountCode])
  @@index([eventId])
}

model Point {
  id          Int      @id @default(autoincrement())
  amount      Int
  expiryDate  DateTime
  receiveDate DateTime @default(now())
  isUsed      Boolean  @default(false)
  userId      Int
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([expiryDate])
}

model PointTransaction {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  amount      Int
  description String
  createdAt   DateTime @default(now())

  @@index([userId])
  @@index([createdAt])
}

model Voucher {
  id           Int           @id @default(autoincrement())
  name         String
  discount     Int
  expiryDate   DateTime?
  maxUsage     Int
  usage        Int           @default(0)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  eventId      Int?
  userId       Int?
  transactions Transaction[]
  user         User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  event        Event?        @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("vouchers")
}
