// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  customer
  organizer
}

enum TransactionStatus {
  pending
  completed
  failed
}

model User {
  id                Int                @id @default(autoincrement())
  role              Role               @default(customer)
  username          String             @unique
  email             String             @unique
  password          String
  name              String
  phoneNumber       String?
  referralCode      String?            @unique
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  referredById      Int?
  referredBy        User?              @relation("UserReferrals", fields: [referredById], references: [id])
  referrals         User[]             @relation("UserReferrals")
  events            Event[]            @relation("UserEvents")
  transactions      Transaction[]
  points            Point[]
  reviews           Review[]
  userPrizes        UserPrize[]
  pointTransactions PointTransaction[]

  @@index([email])
}

model Event {
  id            Int         @id @default(autoincrement())
  slug          String      @unique
  category      String
  title         String
  description   String
  location      String
  startDate     DateTime    @default(now())
  endDate       DateTime    @default(now())
  availableSeat Int
  maxAttendees  Int
  imageUrl      String?
  isFree        Boolean
  price         Decimal?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  organizerId   Int
  organizer     User        @relation("UserEvents", fields: [organizerId], references: [id])
  reviews       Review[]
  promotions    Promotion[]

  @@index([startDate, endDate])
  @@index([category])
}

model Transaction {
  id              Int               @id @default(autoincrement())
  eventId         Int
  totalPrice      Int
  finalPrice      Int
  discount        Int
  pointsUsed      Int               @default(0)
  transactionDate DateTime          @default(now())
  status          TransactionStatus @default(pending)
  userId          Int
  user            User              @relation(fields: [userId], references: [id])

  @@index([transactionDate])
  @@index([status])
  @@index([userId])
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  eventId   Int
  event     Event    @relation(fields: [eventId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])

  @@index([eventId])
  @@index([userId])
}

model Promotion {
  id                 Int      @id @default(autoincrement())
  startDate          DateTime @default(now())
  endDate            DateTime
  discountCode       String
  discountPercentage Decimal
  maxUses            Int
  usedCount          Int      @default(0)
  eventId            Int
  event              Event    @relation(fields: [eventId], references: [id])

  @@index([discountCode])
  @@index([eventId])
}

model Point {
  id          Int      @id @default(autoincrement())
  amount      Int
  expiryDate  DateTime
  receiveDate DateTime
  isUsed      Boolean  @default(false)
  userId      Int
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([expiryDate])
}

model Prize {
  id            Int         @id @default(autoincrement())
  title         String
  description   String
  pointRequired Int
  isAvailable   Boolean
  quantity      Int
  userPrizes    UserPrize[]
}

model UserPrize {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  prizeId   Int
  prize     Prize    @relation(fields: [prizeId], references: [id])
  claimedAt DateTime @default(now())

  @@index([userId])
  @@index([prizeId])
}

model PointTransaction {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  amount      Int
  description String
  createdAt   DateTime @default(now())

  @@index([userId])
  @@index([createdAt])
}
